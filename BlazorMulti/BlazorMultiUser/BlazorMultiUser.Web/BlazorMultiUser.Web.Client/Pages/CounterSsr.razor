@attribute [Route(Navigation.Url.CounterClientSsr)]
@using BlazorMultiUser.Shared.Infrastructure
@using BlazorMultiUser.Shared
@rendermode InteractiveAuto
@inject IAppContextService AppContextService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<PageTitle>Counter SSR</PageTitle>

<div class="alert alert-info" role="alert">
    @(_isServerSideRender ? "Server Rendered" : "Client Rendered")
</div>

<h1>Counter</h1>

<p role="status">Current count (page): @_currentCountPage</p>
<p role="status">Current count (local storage): @_currentCountLocal</p>

<button class="btn btn-primary" @onclick="IncrementCounts">Increment counts</button>
<button class="btn btn-danger" @onclick="ClearCounts">Clear counts</button>

@code {
    private int _currentCountPage;
    private int _currentCountLocal;
    private bool _isServerSideRender = true;

    private const string LocalStorageKey = "currentCount";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _isServerSideRender = AppContextService.IsServerSideRender;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        _isServerSideRender = AppContextService.IsServerSideRender;
        if (firstRender)
        {
            _currentCountLocal = await LocalStorage.GetItemAsync<int>(LocalStorageKey);
            StateHasChanged();
        }
        
    }

    private async Task IncrementCounts()
    {
        _currentCountPage++;
        _currentCountLocal++;
        await LocalStorage.SetItemAsync(LocalStorageKey, _currentCountLocal);
    }

    private async Task ClearCounts()
    {
        _currentCountPage++;
        _currentCountLocal++;
        await LocalStorage.SetItemAsync(LocalStorageKey, _currentCountLocal);
    }
}