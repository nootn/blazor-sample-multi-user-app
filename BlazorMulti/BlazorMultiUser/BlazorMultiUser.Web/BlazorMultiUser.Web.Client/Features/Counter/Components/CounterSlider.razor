@using System.Timers
@implements IDisposable

<input type="range" min="0" max="100" @bind-value="_internalValue" @bind-value:after="OnInput" disabled="@Disabled" />
<span style="color: @GetColor(_internalValue);">@_internalValue</span>

@code {

    [Parameter, EditorRequired]
    public int Value { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<int> ValueChanged { get; set; }

    [Parameter, EditorRequired]
    public bool Disabled { get; set; }

    [Parameter, EditorRequired]
    public bool Debounce { get; set; }

    [Parameter] 
    public int DebounceMilliseconds { get; set; } = 1000;

    private Timer? _debounceTimer;

    private int _internalValue = 0;
    private int? _overrideValue = null;

    protected override void OnParametersSet()
    {
        //If someone tries to set the time while we are in the middle of debouncing, we will override the at the interval to what was passed in
        if (_debounceTimer is not { Enabled: true })
        {
            _internalValue = Value;
        }
        else
        {
            _overrideValue = Value;
        }
    }

    private async Task OnInput()
    {
        if (Debounce)
        {
            _debounceTimer?.Stop();
            _debounceTimer = new Timer(DebounceMilliseconds) { AutoReset = false };
            _debounceTimer.Elapsed += async (_, _) => await OnDebouncedInput(_internalValue);
            _debounceTimer.Start();
        }
        else
        {
            await ValueChanged.InvokeAsync(_internalValue);
        }
    }

    private async Task OnDebouncedInput(int value)
    {
        if (_overrideValue != null)
        {
            await ValueChanged.InvokeAsync(_overrideValue.Value);
            _overrideValue = null;
        }
        else
        {
            await ValueChanged.InvokeAsync(value);
        }
    }

    private string GetColor(int value)
    {
        var red = value * 255 / 100;
        var green = 255 - red;
        return $"rgb({red}, {green}, 0)";
    }

    public void Dispose()
    {
        _debounceTimer?.Dispose();
    }

}