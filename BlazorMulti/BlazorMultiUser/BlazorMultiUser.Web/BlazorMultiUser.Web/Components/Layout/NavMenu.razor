@using BlazorMultiUser.Shared
@implements IDisposable

@inject NavigationManager NavigationManager

<div class="navmenu">
    <input type="checkbox" title="Menu expand/collapse toggle" id="navmenu-toggle" class="navmenu-icon" />
    <label for="navmenu-toggle" class="navmenu-icon"><FluentIcon Value="@(new Icons.Regular.Size20.Navigation())" Color="Color.Fill" /></label>
    <nav class="sitenav" aria-labelledby="main-menu" onclick="document.getElementById('navmenu-toggle').click();">
        <FluentNavMenu Id="main-menu" Collapsible="true" Width="250" Title="Navigation menu" @bind-Expanded="_expanded">
            <FluentNavLink Href="/" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size20.Home())" IconColor="Color.Accent">Home</FluentNavLink>
            <FluentNavGroup Expanded="true" Icon="@(new Icons.Regular.Size20.NumberSymbol())">
                <TitleTemplate>Counters</TitleTemplate>
                <ChildContent>
                    <FluentNavLink Href="@Navigation.Url.CounterClientWasm" Icon="@(new Icons.Regular.Size20.NumberCircle1())" IconColor="Color.Accent">Counter</FluentNavLink>
                    <FluentNavLink Href="@Navigation.Url.CounterDatabaseDefault" Icon="@(new Icons.Regular.Size20.NumberCircle2())" IconColor="Color.Accent">Counter DB (Default)</FluentNavLink>
                    <FluentNavLink Href="@Navigation.Url.CounterDatabasePersist" Icon="@(new Icons.Regular.Size20.NumberCircle3())" IconColor="Color.Accent">Counter DB (Persist)</FluentNavLink>
                    <FluentNavLink Href="@Navigation.Url.CounterFluxor" Icon="@(new Icons.Regular.Size20.NumberCircle4())" IconColor="Color.Accent">Counter Fluxor</FluentNavLink>
                </ChildContent>
            </FluentNavGroup>

            <FluentNavLink Href="@Navigation.Url.Reports" Icon="@(new Icons.Regular.Size20.Gauge())" IconColor="Color.Accent">Reports</FluentNavLink>

            <FluentNavGroup Expanded="true" Icon="@(new Icons.Regular.Size20.LockShield())">
                <TitleTemplate>Security</TitleTemplate>
                <ChildContent>
                    <FluentNavLink Href="@Navigation.Url.Auth" Icon="@(new Icons.Regular.Size20.LockShield())" IconColor="Color.Info">Auth Check</FluentNavLink>
                    <AuthorizeView>
                        <Authorized>
                            <FluentNavLink Href="@Navigation.Url.AccountManage" Icon="@(new Icons.Regular.Size24.Person())" IconColor="Color.Info">@context.User.Identity?.Name</FluentNavLink>
                            <FluentNavLink Href="@($"{Navigation.Url.AccountLogoutConfirm}?returnUrl={Uri.EscapeDataString(_currentUrl ?? "/")}")" Icon="@(new Icons.Filled.Size12.ArrowLeft())" IconColor="Color.Warning">Logout</FluentNavLink>
                        </Authorized>
                        <NotAuthorized>
                            <FluentNavLink Href="@Navigation.Url.AccountRegister" Icon="@(new Icons.Regular.Size24.Person())" IconColor="Color.Success">Register</FluentNavLink>
                            <FluentNavLink Href="@Navigation.Url.AccountLogin" Icon="@(new Icons.Filled.Size20.PersonAccounts())" IconColor="Color.Success">Login</FluentNavLink>
                        </NotAuthorized>
                    </AuthorizeView>
                </ChildContent>
            </FluentNavGroup>
        </FluentNavMenu>
    </nav>
</div>

@code {
    private bool _expanded = true;

    private string? _currentUrl;

    protected override void OnInitialized()
    {
        _currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}